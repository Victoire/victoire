{% set hasStyle = 0 %}
{% for style in ['containerWidth', 'containerHeight', 'containerMargin', 'containerPadding', 'textAlign',
                 'containerBackgroundType', 'containerBackgroundImage', 'containerBackgroundRepeat',
                 'containerBackgroundPosition', 'containerBackgroundSize', 'containerBackgroundOverlay',
                 'containerBackgroundColor'] %}

    {% for responsive in ['', 'xs', 'sm', 'md', 'lg'] %}
        {% if attribute(widget, style ~ responsive|upper) %}
            {% set hasStyle = hasStyle + 1 %}
        {% endif %}
    {% endfor %}

{% endfor %}

{% if hasStyle %}
{% spaceless %}
    {% for responsive in ['', 'xs', 'sm', 'md', 'lg'] %}
        {% set config = responsive != '' ? attribute(victoire_twig_responsive, responsive) : false %}
        {% if config.min is defined %}
            {% set attr = "and (min-width: #{config.min}px)" %}
        {% endif %}
        {% if config.max is defined %}
            {% set attr = "#{attr} and (max-width: #{config.max}px)" %}
        {% endif %}

        {% include "VictoireCoreBundle:Widget:style/_styleRender.html.twig" with {
            'width': attribute(widget, 'containerWidth' ~ responsive|upper),
            'minHeight': attribute(widget, 'containerHeight' ~ responsive|upper),
            'margin': attribute(widget, 'containerMargin' ~ responsive|upper),
            'padding': attribute(widget, 'containerPadding' ~ responsive|upper),
            'position': attribute(widget, 'containerBackgroundOverlay' ~ responsive|upper) ? 'relative',
            'textAlign': attribute(widget, 'textAlign' ~ responsive|upper),
            'bgType': attribute(widget, 'containerBackgroundType' ~ responsive|upper),
            'bgImage': attribute(widget, 'containerBackgroundImage' ~ responsive|upper),
            'bgRepeat': attribute(widget, 'containerBackgroundRepeat' ~ responsive|upper),
            'bgPosition': attribute(widget, 'containerBackgroundPosition' ~ responsive|upper),
            'bgSize': attribute(widget, 'containerBackgroundSize' ~ responsive|upper),
            'bgOverlay': attribute(widget, 'containerBackgroundOverlay' ~ responsive|upper),
            'bgColor': attribute(widget, 'containerBackgroundColor' ~ responsive|upper),
            'mediaQuery': attr is defined ? attr,
            'selector': '#widget-' ~ widget.id
        } %}
    {% endfor %}
{% endspaceless %}
{% endif %}
